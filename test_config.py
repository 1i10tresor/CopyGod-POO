"""
Script de test de la configuration.
V√©rifie que tous les param√®tres n√©cessaires sont configur√©s.
"""

import os
from dotenv import load_dotenv

def test_configuration():
    """Teste la configuration du syst√®me."""
    print("üîß TEST DE CONFIGURATION")
    print("=" * 40)
    
    # Charger le .env
    if not os.path.exists('.env'):
        print("‚ùå Fichier .env manquant!")
        print("üí° Copiez .env.example vers .env et remplissez les valeurs")
        return False
    
    load_dotenv()
    
    errors = []
    warnings = []
    
    # Test Telegram
    print("\nüì± Configuration Telegram:")
    api_id = os.getenv("TELEGRAM_API_ID", "0")
    api_hash = os.getenv("TELEGRAM_API_HASH", "")
    
    if api_id == "0" or api_id == "YOUR_API_ID_HERE":
        errors.append("TELEGRAM_API_ID non configur√©")
    else:
        print(f"‚úÖ API_ID: {api_id}")
    
    if not api_hash or api_hash == "YOUR_API_HASH_HERE":
        errors.append("TELEGRAM_API_HASH non configur√©")
    else:
        print(f"‚úÖ API_HASH: {api_hash[:8]}...")
    
    # Test OpenAI
    print("\nü§ñ Configuration OpenAI:")
    gpt_key = os.getenv("GPT_KEY", "")
    
    if not gpt_key or gpt_key == "YOUR_OPENAI_API_KEY_HERE":
        errors.append("GPT_KEY non configur√©")
    else:
        print(f"‚úÖ GPT_KEY: {gpt_key[:12]}...")
    
    # Test MT5 Accounts
    print("\nüìà Configuration MT5:")
    accounts = ['MAT', 'DID', 'DEMO']
    
    for account in accounts:
        login = os.getenv(f"MT5_{account}_LOGIN", "")
        password = os.getenv(f"MT5_{account}_PASSWORD", "")
        server = os.getenv(f"MT5_{account}_SERVER", "")
        
        print(f"\nüìä Compte {account}:")
        
        if not login or login == f"YOUR_{account}_LOGIN":
            warnings.append(f"MT5_{account}_LOGIN non configur√©")
            print(f"‚ö†Ô∏è Login: Non configur√©")
        else:
            print(f"‚úÖ Login: {login}")
        
        if not password or password == f"YOUR_{account}_PASSWORD":
            warnings.append(f"MT5_{account}_PASSWORD non configur√©")
            print(f"‚ö†Ô∏è Password: Non configur√©")
        else:
            print(f"‚úÖ Password: {'*' * len(password)}")
        
        if not server or server == f"YOUR_{account}_SERVER":
            warnings.append(f"MT5_{account}_SERVER non configur√©")
            print(f"‚ö†Ô∏è Server: Non configur√©")
        else:
            print(f"‚úÖ Server: {server}")
    
    # R√©sum√©
    print("\n" + "=" * 40)
    print("üìã R√âSUM√â:")
    
    if errors:
        print(f"‚ùå {len(errors)} erreur(s) critique(s):")
        for error in errors:
            print(f"   ‚Ä¢ {error}")
    
    if warnings:
        print(f"‚ö†Ô∏è {len(warnings)} avertissement(s):")
        for warning in warnings:
            print(f"   ‚Ä¢ {warning}")
    
    if not errors and not warnings:
        print("‚úÖ Configuration compl√®te!")
        return True
    elif not errors:
        print("‚úÖ Configuration minimale OK (au moins un compte MT5 requis)")
        return True
    else:
        print("‚ùå Configuration incompl√®te")
        return False

if __name__ == "__main__":
    test_configuration()