import asyncio
import time
from datetime import datetime
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError
from config import telegram_config, trading_config
from signalPaser import SignalProcessor
from riskManager import RiskManager
from order import SendOrder

class TradingSystemTelegram:
    def __init__(self):
        # Configuration Telegram
        self.api_id = telegram_config.API_ID
        self.api_hash = telegram_config.API_HASH
        self.session_name = telegram_config.SESSION_NAME
        
        # IDs des canaux (format -100...)
        self.channel_1_id = -1002125503665  # Canal 1
        self.channel_2_id = -1002259371711  # Canal 2
        
        # Composants du syst√®me
        self.client = None
        self.order_sender = SendOrder()
        self.risk_manager = RiskManager()
        self.is_running = False
        
        print("ü§ñ Syst√®me de trading initialis√©")
    
    async def start_system(self):
        """D√©marre le syst√®me complet."""
        print("üöÄ D√©marrage du syst√®me...")
        
        # V√©rifier MT5
        if not self.order_sender.is_connected:
            print("‚ùå MT5 non connect√©")
            return False
        
        # Initialiser Telegram
        if not await self._initialize_telegram():
            return False
        
        # V√©rifier l'acc√®s aux canaux
        if not await self._verify_channels():
            return False
        
        # D√©marrer l'√©coute
        await self._start_listening()
        
        self.is_running = True
        print("‚úÖ Syst√®me d√©marr√© avec succ√®s!")
        return True
    
    async def _initialize_telegram(self):
        """Initialise la connexion Telegram."""
        try:
            print("üîÑ Connexion √† Telegram...")
            
            self.client = TelegramClient(
                self.session_name,
                self.api_id,
                self.api_hash
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"‚úÖ Connect√©: {me.first_name}")
                return True
            else:
                print("‚ùå Autorisation Telegram √©chou√©e")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur Telegram: {e}")
            return False
    
    async def _verify_channels(self):
        """V√©rifie l'acc√®s aux canaux."""
        try:
            print("üîç V√©rification des canaux...")
            
            # Tester Canal 1
            try:
                entity1 = await self.client.get_entity(self.channel_1_id)
                print(f"‚úÖ Canal 1 accessible: {getattr(entity1, 'title', 'Canal 1')}")
            except Exception as e:
                print(f"‚ùå Canal 1 inaccessible: {e}")
                return False
            
            # Tester Canal 2
            try:
                entity2 = await self.client.get_entity(self.channel_2_id)
                print(f"‚úÖ Canal 2 accessible: {getattr(entity2, 'title', 'Canal 2')}")
            except Exception as e:
                print(f"‚ùå Canal 2 inaccessible: {e}")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur v√©rification canaux: {e}")
            return False
    
    async def _start_listening(self):
        """D√©marre l'√©coute des messages."""
        print("üéß D√©marrage de l'√©coute...")
        
        @self.client.on(events.NewMessage(chats=[self.channel_1_id, self.channel_2_id]))
        async def handle_message(event):
            try:
                message_text = event.message.message
                chat_id = event.chat_id
                
                # Identifier le canal
                if chat_id == self.channel_1_id:
                    channel_id = 1
                    channel_name = "Canal 1"
                elif chat_id == self.channel_2_id:
                    channel_id = 2
                    channel_name = "Canal 2"
                else:
                    return
                
                print(f"\nüÜï Message {channel_name}: {message_text[:50]}...")
                
                # Traiter le message
                await self._process_message(message_text, channel_id)
                
            except Exception as e:
                print(f"‚ùå Erreur traitement message: {e}")
        
        print("‚úÖ √âcoute active")
    
    async def _process_message(self, message_text, channel_id):
        """Traite un message avec retry."""
        max_retries = 2
        
        for attempt in range(max_retries + 1):
            if attempt > 0:
                print(f"üîÑ Tentative {attempt + 1}/{max_retries + 1}")
                await asyncio.sleep(2)
            
            try:
                # 1. V√©rifier si c'est un signal
                class MockSignal:
                    def __init__(self, text):
                        self.text = text
                
                processor = SignalProcessor(MockSignal(message_text), channel_id)
                
                if not processor.is_signal():
                    print("‚ÑπÔ∏è Pas un signal de trading")
                    return
                
                # 2. Extraire le signal via ChatGPT
                print(f"ü§ñ Envoi √† ChatGPT (Canal {channel_id})...")
                signals = processor.get_signal()
                
                if not signals or len(signals) != 3:
                    print(f"‚ùå Tentative {attempt + 1}: Signal invalide")
                    if attempt < max_retries:
                        continue
                    else:
                        print("‚ùå Toutes les tentatives ont √©chou√©")
                        return
                
                print(f"‚úÖ 3 signaux extraits")
                
                # 3. V√©rifier le risque
                account_info = self.order_sender.get_account_info()
                if not account_info:
                    print("‚ùå Impossible d'obtenir les infos du compte")
                    return
                
                if not self.risk_manager.can_open_position(account_info):
                    print("‚ùå Risque trop √©lev√©")
                    return
                
                # 4. Calculer les lots
                lot_sizes = self.risk_manager.calculate_lot_sizes(signals)
                
                # 5. Placer les ordres
                print("üìà Placement des ordres...")
                results = self.order_sender.place_orders(signals, lot_sizes)
                
                if results and len(results) > 0:
                    print(f"üéâ {len(results)} ordres plac√©s avec succ√®s!")
                    return
                else:
                    print(f"‚ùå Tentative {attempt + 1}: Tous les ordres ont √©chou√©")
                    if attempt < max_retries:
                        continue
                    else:
                        print("‚ùå √âchec final apr√®s toutes les tentatives")
                        return
                
            except Exception as e:
                print(f"‚ùå Erreur tentative {attempt + 1}: {e}")
                if attempt < max_retries:
                    continue
                else:
                    print("‚ùå √âchec final")
                    return
    
    async def run_forever(self):
        """Maintient le syst√®me en vie."""
        try:
            print("üí° Syst√®me actif... Ctrl+C pour arr√™ter")
            
            while self.is_running:
                await asyncio.sleep(60)  # V√©rification chaque minute
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Arr√™t demand√©")
        except Exception as e:
            print(f"\nüí• Erreur: {e}")
        finally:
            await self.stop_system()
    
    async def stop_system(self):
        """Arr√™te le syst√®me."""
        print("üõë Arr√™t du syst√®me...")
        
        self.is_running = False
        
        if self.client:
            await self.client.disconnect()
        
        self.order_sender.close_connection()
        
        print("‚úÖ Syst√®me arr√™t√©")

# Fonction principale
async def main():
    system = TradingSystemTelegram()
    
    if await system.start_system():
        await system.run_forever()
    else:
        print("‚ùå Impossible de d√©marrer le syst√®me")

if __name__ == "__main__":
    asyncio.run(main())