import asyncio
from telethon import TelegramClient, events
from config import config
from chatGpt import chatGpt
from order import SendOrder
from riskManager import RiskManager
import re

class TradingBot:
    def __init__(self, risk_per_signal_eur, account_type, telegram_account=None):
        # Configuration Telegram
        if telegram_account is None:
            telegram_account = "MAT"  # Par d√©faut
        
        telegram_creds = config.get_telegram_credentials(telegram_account)
        self.api_id = telegram_creds['api_id']
        self.api_hash = telegram_creds['api_hash']
        self.session_name = telegram_creds['session_name']
        self.telegram_account = telegram_account.upper()
        
        # Configuration MT5
        self.account_type = account_type.upper()
        
        # IDs des canaux
        self.channel_1_id = config.TELEGRAM_CHANNEL_1_ID
        self.channel_2_id = config.TELEGRAM_CHANNEL_2_ID
        
        # Composants
        self.client = None
        self.order_sender = SendOrder(account_type)
        self.risk_manager = RiskManager(risk_per_signal_eur)
        
    async def start(self):
        """D√©marre le bot."""
        print(f"üöÄ D√©marrage du bot...")
        print(f"üì± Telegram: Compte {self.telegram_account}")
        print(f"üìà MT5: Compte {self.account_type}")
        
        # Connexion Telegram
        self.client = TelegramClient(self.session_name, self.api_id, self.api_hash)
        await self.client.start()
        
        if not await self.client.is_user_authorized():
            print("‚ùå Pas autoris√© sur Telegram")
            return False
        
        me = await self.client.get_me()
        print(f"‚úÖ Connect√© Telegram: {me.first_name} (Compte {self.telegram_account})")
        
        # V√©rifier MT5
        if not self.order_sender.is_connected:
            print(f"‚ùå MT5 non connect√© sur le compte {self.account_type}")
            return False
        
        # V√©rifier canaux
        try:
            await self.client.get_entity(self.channel_1_id)
            await self.client.get_entity(self.channel_2_id)
            print("‚úÖ Canaux accessibles")
        except Exception as e:
            print(f"‚ùå Canaux inaccessibles: {e}")
            return False
        
        # √âcouter les messages
        @self.client.on(events.NewMessage(chats=[self.channel_1_id, self.channel_2_id]))
        async def handle_message(event):
            message_text = event.message.text
            chat_id = event.chat_id
            
            # Identifier le canal
            if chat_id == self.channel_1_id:
                channel_id = 1
            elif chat_id == self.channel_2_id:
                channel_id = 2
            else:
                return
            
            print(f"\nüì® Message Canal {channel_id}: {message_text[:50]}...")
            await self.process_message(message_text, channel_id)
        
        print(f"üéß √âcoute active sur {self.telegram_account} ‚Üí {self.account_type}...")
        return True
    
    async def process_message(self, message_text, channel_id):
        """Traite un message."""
        try:
            # 1. V√©rifier si signal (has tp + has sl)
            if not self.has_tp_sl(message_text):
                print("‚ÑπÔ∏è Pas un signal")
                return
            
            print("‚úÖ Signal d√©tect√©!")
            
            # 2. Envoyer √† ChatGPT
            gpt = chatGpt(message_text, channel_id)
            signal_data = gpt.get_signal()
            
            if not signal_data:
                print("‚ùå ChatGPT n'a pas pu extraire le signal")
                return
            
            print("‚úÖ Signal extrait par ChatGPT")
            
            # 3. V√©rifier coh√©rence
            if not self.validate_signal(signal_data):
                print("‚ùå Signal incoh√©rent")
                return
            
            print("‚úÖ Signal valid√©")
            
            # 4. Cr√©er 3 ordres individuels
            orders = self.create_orders(signal_data)
            
            # 5. Calculer les tailles de lot
            lot_sizes = self.risk_manager.calculate_lot_sizes(orders)
            
            # 6. Placer les ordres sur le compte sp√©cifi√©
            print(f"üìà Placement des ordres sur le compte {self.account_type}...")
            results = self.order_sender.place_orders(orders, lot_sizes)
            
            if results:
                print(f"üéâ {len(results)} ordres plac√©s sur {self.account_type}!")
            else:
                print(f"‚ùå √âchec placement ordres sur {self.account_type}")
                
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
    
    def has_tp_sl(self, text):
        """V√©rifie si le message contient TP et SL."""
        has_tp = bool(re.search(r'(tp|take.?profit)', text, re.IGNORECASE))
        has_sl = bool(re.search(r'(sl|stop.?loss)', text, re.IGNORECASE))
        return has_tp and has_sl
    
    def validate_signal(self, signal_data):
        """Valide la coh√©rence du signal."""
        try:
            symbol = signal_data['symbol']
            sens = signal_data['sens']
            sl = signal_data['sl']
            entry_prices = signal_data['entry_prices']
            tps = signal_data['tps']
            
            # V√©rifier structure
            if not all([symbol, sens, sl, entry_prices, tps]):
                return False
            
            if len(entry_prices) != 3 or len(tps) != 3:
                return False
            
            if sens not in ['BUY', 'SELL']:
                return False
            
            # V√©rifier coh√©rence prix
            for i in range(3):
                entry = entry_prices[i]
                tp = tps[i]
                
                if sens == 'BUY':
                    if sl >= entry or tp <= entry:
                        return False
                else:  # SELL
                    if sl <= entry or tp >= entry:
                        return False
            
            return True
            
        except Exception:
            return False
    
    def create_orders(self, signal_data):
        """Cr√©e 3 ordres individuels."""
        orders = []
        
        for i in range(3):
            order = {
                'symbol': signal_data['symbol'],
                'sens': signal_data['sens'],
                'entry_price': signal_data['entry_prices'][i],
                'sl': signal_data['sl'],
                'tp': signal_data['tps'][i]
            }
            orders.append(order)
        
        return orders
    
    async def run(self):
        """Lance le bot."""
        if await self.start():
            try:
                print(f"üí° Bot actif ({self.telegram_account} ‚Üí {self.account_type})... Ctrl+C pour arr√™ter")
                await self.client.run_until_disconnected()
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è Arr√™t du bot")
            finally:
                self.order_sender.close_connection()

def get_account_selection():
    """Demande le choix du compte MT5 √† l'utilisateur."""
    print("\nüìà S√âLECTION DU COMPTE MT5")
    print("=" * 30)
    print("1. MAT   - Compte MAT")
    print("2. DID   - Compte DID") 
    print("3. DEMO  - Compte D√©mo")
    print("=" * 30)
    
    while True:
        try:
            choice = input("Choisir le compte MT5 (1/2/3): ").strip()
            
            if choice == '1':
                return 'MAT'
            elif choice == '2':
                return 'DID'
            elif choice == '3':
                return 'DEMO'
            else:
                print("‚ùå Choix invalide. Veuillez entrer 1, 2 ou 3")
                
        except KeyboardInterrupt:
            print("\n‚ùå Annul√©")
            exit()

def get_telegram_account_selection():
    """Demande le choix du compte Telegram √† l'utilisateur."""
    print("\nüì± S√âLECTION DU COMPTE TELEGRAM")
    print("=" * 35)
    print("1. MAT   - Compte Telegram MAT")
    print("2. DID   - Compte Telegram DID")
    print("=" * 35)
    
    while True:
        try:
            choice = input("Choisir le compte Telegram (1/2): ").strip()
            
            if choice == '1':
                return 'MAT'
            elif choice == '2':
                return 'DID'
            else:
                print("‚ùå Choix invalide. Veuillez entrer 1 ou 2")
                
        except KeyboardInterrupt:
            print("\n‚ùå Annul√©")
            exit()

def get_risk_input():
    """Demande le risque √† l'utilisateur."""
    while True:
        try:
            risk = input("üí∞ Quel risque par signal (en ‚Ç¨) ? : ")
            risk_value = float(risk)
            
            if risk_value <= 0:
                print("‚ùå Le risque doit √™tre positif")
                continue
            
            if risk_value > 1000:
                confirm = input(f"‚ö†Ô∏è Risque √©lev√© ({risk_value}‚Ç¨). Confirmer ? (oui/non): ")
                if confirm.lower() not in ['oui', 'o', 'yes', 'y']:
                    continue
            
            return risk_value
            
        except ValueError:
            print("‚ùå Veuillez entrer un nombre valide")
        except KeyboardInterrupt:
            print("\n‚ùå Annul√©")
            exit()

async def main():
    print("ü§ñ SYST√àME DE TRADING TELEGRAM")
    print("=" * 40)
    
    # S√©lection du compte Telegram
    telegram_account = get_telegram_account_selection()
    print(f"‚úÖ Compte Telegram s√©lectionn√©: {telegram_account}")
    
    # S√©lection du compte MT5
    mt5_account = get_account_selection()
    print(f"‚úÖ Compte MT5 s√©lectionn√©: {mt5_account}")
    
    # Demander le risque
    risk_per_signal = get_risk_input()
    
    print(f"\n‚úÖ Configuration:")
    print(f"üì± Telegram: {telegram_account}")
    print(f"üìà MT5: {mt5_account}")
    print(f"üí∞ Risque: {risk_per_signal}‚Ç¨ par signal")
    print(f"üìä R√©partition: {risk_per_signal/3:.2f}‚Ç¨ par position")
    print("üîÑ Arrondi: Toujours √† l'inf√©rieur")
    print("üõ°Ô∏è Garantie: Risque jamais d√©pass√©")
    
    # Confirmation finale
    print(f"\n‚ö†Ô∏è Les ordres seront pass√©s sur le compte MT5 {mt5_account}")
    print(f"‚ö†Ô∏è En utilisant le compte Telegram {telegram_account}")
    confirm = input("Continuer ? (oui/non): ").lower().strip()
    if confirm not in ['oui', 'o', 'yes', 'y']:
        print("‚ùå Lancement annul√©")
        return
    
    # Lancer le bot
    bot = TradingBot(risk_per_signal, mt5_account, telegram_account)
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())